version: '3.8'

services:

  caddy:

    container_name: caddy

    image: caddy:2.6.4
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"

    networks:
      - laravel
    # image: 'caddy:2-alpine'
    # restart: unless-stopped
    # ports:
    #   - '8200:80'
    #   - '9001:9001'
    volumes:
      - './caddy/Caddyfile:/etc/caddy/Caddyfile'
      - './caddy/config:/config/caddy/'
      # - './../data-www:/srv'
      - '${BU_PHP_FOLDER}:/srv'
      # - www47:/srv
    depends_on:
      - app

  app:
    container_name: app

    networks:
      - laravel
    build:
      context: .
      dockerfile: Dockerfile
      # args:
      #   - PHPUSER=${PHPUSER:-www-data}
      #   - PHPGROUP=${PHPGROUP:-www-data}
      # environment:
      #   DB_HOST: mysql
    restart: unless-stopped
    tty: true
    expose:
      - 9000
      # - 9001
    volumes:
      # - './data-www:/srv'
      - '${BU_PHP_FOLDER}:/srv'
      # - www47:/srv
    depends_on:
      - mysql2
      # - redis_db
      # - mailhog

  mysql2:

    # build:
    #   context: .
    #   dockerfile: Mysql.Dockerfile

    container_name: mysql2
    networks:
      - laravel
    # image: yobasystems/alpine-mariadb
    image: mariadb:10.7.8

    environment:

      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: ${BU_DB_ROOT_PASSWORD}

      MYSQL_DATABASE: ${BU_DB_DATABASE}
      MYSQL_USER: ${BU_DB_USERNAME}
      MYSQL_PASSWORD: ${BU_DB_PASSWORD}

    # expose:
    #   - '3306'
    ports:
      # - '3600:3306'
      - '3306:3306'
    volumes:
      # - './data-mysql:/var/lib/mysql'
      # - v_mysql:/var/lib/mysql
      - '${BU_FOLDER_DB}:/var/lib/mysql'
    restart: unless-stopped

  #++
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    links:
      - mysql2:db
    ports:
      - 6060:80
    environment:
      MYSQL_ROOT_PASSWORD: ${BU_DB_ROOT_PASSWORD}
      UPLOAD_LIMIT: 300M
    depends_on:
      - mysql2
    networks:
      - laravel


  # redis:
  #     container_name: redis
  #     image: redis:latest
  #     command: redis-server --appendonly yes --replica-read-only no
  #     ports:
  #         - "6379:6379"
  #     volumes:
  #         - dataredis:/var/lib/redis
  #     environment:
  #         - REDIS_REPLICATION_MODE=master
  #     restart: unless-stopped
  #     networks:
  #         - laravel



volumes:
  # scr:
  Caddyfile:
  # dataredis:
  v_mysql:
  data-www:
  www47:
  config:

networks:
  laravel: null

  # npm:
  #   image: node:13.7
  #   container_name: npm
  #   volumes:
  #     - './src:/srv'
  #   ports:
  #     - "4000:3000"
  #     - "4001:3001"
  #   working_dir: /srv
  #   entrypoint: [ 'npm' ]
  #   networks:
  #     - laravel


  # redis_db:
  #   container_name: redis_db
  #   image: docker.io/bitnami/redis:6.2
  #   environment:
  #     - "ALLOW_EMPTY_PASSWORD=yes"
  #     - "REDIS_PORT_NUMBER=6379"
  #   expose: 
  #     - 6379
  #   # ports:
  #   #   - '6379:6379'
  #   volumes:
  #     - './data-redis:/bitnami/redis/datum'
  #   networks:
  #     - laravel

  # mailhog:
  #   container_name: mailhog
  #   image: mailhog/mailhog:latest
  #   ports:
  #     - "1025:1025"
  #     - "8025:8025"
  #   networks:
  #     - laravel

  # composer:
  #   build:
  #     context: .
  #     dockerfile: composer.dockerfile
  #     args:
  #       - PHPUSER=${PHPUSER:-www-data}
  #       - PHPGROUP=${PHPGROUP:-www-data}
  #   container_name: composer
  #   volumes:
  #     - ./src:/srv
  #   depends_on:
  #     - app
  #   user: ${PHPUSER:-www-data}
  #   entrypoint: [ 'composer', '--ignore-platform-reqs' ]
  #   networks:
  #     - laravel
